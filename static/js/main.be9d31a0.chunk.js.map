{"version":3,"sources":["components/firebase-sandbox.js","components/carousel.js","components/requester/requester-page.js","components/volunteer/volunteer-page.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FirebaseSandbox","state","response","collection","doc","onSnapshot","setState","data","this","email","React","Component","Carousel","props","type","RequesterPage","Request","match","useRouteMatch","to","url","VolunteerPage","Volunteer","App","className","path","Home","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAWAA,gBATe,CACbC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,eACnBC,MAAO,8CAMF,IAAMC,EAAb,kDACI,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,SAAS,IAHA,EADjB,gEAQyB,IAAD,OAClBV,cAAqBW,WAAW,YAAYC,IAAI,YAAYC,YAAW,SAAAD,GACrE,EAAKE,SAAS,CACZJ,SAAUE,EAAIG,cAXxB,+BAiBM,OAAO,sCAAYC,KAAKP,MAAMC,SAASO,WAjB7C,GAAqCC,IAAMC,WCX9BC,EAAb,uKAEM,OAAO,6DAAmCJ,KAAKK,MAAMC,UAF3D,GAA8BJ,IAAMC,WCYvBI,EAAb,uKAEQ,OAAO,kBAACC,EAAD,UAFf,GAAmCN,IAAMC,WAUzC,SAASK,IACL,IAAIC,EAAQC,cAEZ,OACE,6BACE,uCACA,kBAAC,EAAD,CAAUJ,KAAK,cAEf,4BACE,4BACE,kBAAC,IAAD,CAAMK,GAAE,UAAKF,EAAMG,IAAX,YAAR,WAEF,4BACE,kBAAC,IAAD,CAAMD,GAAE,UAAKF,EAAMG,IAAX,YAAR,aCxBL,IAAMC,EAAb,uKAEM,OAAO,kBAACC,EAAD,UAFb,GAAmCZ,IAAMC,WAOzC,SAASW,IACL,IAAIL,EAAQC,cAEZ,OACE,6BACE,yCACA,kBAAC,EAAD,CAAUJ,KAAK,cAEf,4BACE,4BACE,kBAAC,IAAD,CAAMK,GAAE,UAAKF,EAAMG,IAAX,YAAR,WAEF,4BACE,kBAAC,IAAD,CAAMD,GAAE,UAAKF,EAAMG,IAAX,YAAR,aCjBG,SAASG,IAGtB,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKC,UAAU,aACb,4BACE,4BAAI,kBAAC,IAAD,CAAML,GAAG,qBAAT,sBAQR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,YACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAACC,EAAD,OAGF,kBAAC,IAAD,CAAOD,KAAK,qBACV,kBAAC,EAAD,UAsBZ,SAASC,IACP,OACE,6BACE,kBAAC,IAAD,CAAMF,UAAU,cAAcL,GAAG,YAAjC,WACA,kBAAC,IAAD,CAAMK,UAAU,cAAcL,GAAG,cAAjC,cC9DcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be9d31a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as firebase from 'firebase';\r\nconst config = {\r\n  apiKey: \"AIzaSyDLRtZ9MWzqYCeTwfWjc3pFzD9-P2HSq2s\",\r\n  authDomain: \"covid-19-neighborhood-help.firebaseapp.com\",\r\n  databaseURL: \"https://covid-19-neighborhood-help.firebaseio.com\",\r\n  projectId: \"covid-19-neighborhood-help\",\r\n  storageBucket: \"covid-19-neighborhood-help.appspot.com\",\r\n  messagingSenderId: \"926958898978\",\r\n  appId: \"1:926958898978:web:8bc4070b5e6fd445fcdf7b\"\r\n}\r\nfirebase.initializeApp(config);\r\n\r\n\r\n// Firebase Testing\r\nexport class FirebaseSandbox extends React.Component {\r\n    constructor(){\r\n      super();\r\n      this.state = {\r\n        response:{}\r\n      }\r\n    }\r\n  \r\n    componentDidMount() {\r\n      firebase.firestore().collection(\"requests\").doc(\"request1\").onSnapshot(doc => {\r\n        this.setState({\r\n          response: doc.data()\r\n        });\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return <h1>Hello, {this.state.response.email}</h1>;\r\n    }\r\n  }","\r\nimport React, { Component } from 'react';\r\n\r\n// Volunteer Page\r\nexport class Carousel extends React.Component {\r\n    render() {\r\n      return <div>[how it works carousel] from {this.props.type}</div>;\r\n    }\r\n  }","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\n\r\n// Volunteer Page\r\nexport class RequesterPage extends React.Component {\r\n    render() {\r\n        return <Request />;\r\n    }\r\n}\r\n\r\n\r\n\r\n  \r\n// Request Page\r\nfunction Request() {\r\n    let match = useRouteMatch();\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Request</h2>\r\n        <Carousel type=\"requester\" />\r\n  \r\n        <ul>\r\n          <li>\r\n            <Link to={`${match.url}/step-1`}>Step 1</Link>\r\n          </li>\r\n          <li>\r\n            <Link to={`${match.url}/step-2`}>\r\n              Step 2\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport {Carousel} from '../carousel';  \r\n\r\n// Volunteer Page\r\nexport class VolunteerPage extends React.Component {\r\n    render() {\r\n      return <Volunteer />;\r\n    }\r\n}\r\n\r\n// Request Page\r\nfunction Volunteer() {\r\n    let match = useRouteMatch();\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Volunteer</h2>\r\n        <Carousel type=\"volunteer\" />\r\n  \r\n        <ul>\r\n          <li>\r\n            <Link to={`${match.url}/step-1`}>Step 1</Link>\r\n          </li>\r\n          <li>\r\n            <Link to={`${match.url}/step-2`}>\r\n              Step 2\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n      </div>\r\n    );\r\n  }","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\nimport {FirebaseSandbox} from './components/firebase-sandbox';\r\nimport {RequesterPage} from './components/requester/requester-page';\r\nimport {VolunteerPage} from './components/volunteer/volunteer-page';\r\n\r\n\r\n\r\nexport default function App() {\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav className=\"debug-nav\">\r\n          <ul>\r\n            <li><Link to=\"/firebase-sandbox\">Firebox Sandbox</Link></li>\r\n          </ul>\r\n        </nav>\r\n\r\n        {/* <FirebaseSandbox /> */}\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/request\">\r\n            <RequesterPage />\r\n          </Route>\r\n         \r\n          <Route path=\"/volunteer\">\r\n            <VolunteerPage />\r\n          </Route>\r\n\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n\r\n          <Route path=\"/firebase-sandbox\">\r\n            <FirebaseSandbox />\r\n          </Route>\r\n\r\n\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n  return (\r\n    <nav>\r\n      <Link className=\"main-choice\" to=\"/request\">Request</Link>\r\n      <Link className=\"main-choice\" to=\"/volunteer\">Volunteer</Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["assets/img/requester.svg","context/firebase.js","components/carousel.js","components/requester/requester-form.js","components/requester/requester-how-it-works.js","components/requester/requester-complete.js","components/requester/requester-page.js","components/volunteer/volunteer-page.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["module","exports","FirebaseContext","createContext","children","app","apps","length","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Provider","value","React","Component","RequesterForm","state","name","email","location_description","message","phone","time_created","handleChange","bind","handleSubmit","evt","this","setState","target","event","day","firebase","Timestamp","fromDate","Date","query","props","history","push","preventDefault","Fragment","className","to","onSubmit","type","onChange","RequesterHowItWorks","Page","useTranslation","t","i18n","useRouteMatch","src","requestIcon","alt","RequesterComplete","URLSearchParams","window","location","search","get","i18nKey","RequesterPage","Request","match","path","url","component","VolunteerPage","Volunteer","listToDisplay","useContext","useState","list","setList","ref","firestore","collection","console","log","useEffect","then","snapshot","requests","forEach","request","key","id","data","l","catch","error","map","seconds","LanguageSelect","isHidden","onClick","toggleHidden","LanguageToggle","changeLanguage","lng","App","Home","Boolean","hostname","use","Backend","init","backend","loadPath","LanguageDetector","initReactI18next","fallbackLng","debug","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04c93fb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/requester.d393c7d6.svg\";","import React, { createContext } from 'react'\r\nimport app from 'firebase/app'\r\n\r\nconst FirebaseContext = createContext(null)\r\nexport { FirebaseContext }\r\n\r\nexport default ({ children }) => {\r\n    if (!app.apps.length) {\r\n      app.initializeApp({\r\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n        authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n        databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n        projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n        storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n        messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n        appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n      })\r\n    }\r\n    return (\r\n      <FirebaseContext.Provider value={ app }>\r\n        { children }\r\n      </FirebaseContext.Provider>\r\n    )\r\n  }","\r\nimport React, { Component } from 'react';\r\n\r\n// Volunteer Page\r\nexport class Carousel extends React.Component {\r\n    render() {\r\n      return <div>[how it works carousel] from {this.props.type}</div>;\r\n    }\r\n  }","\r\nimport React from 'react';\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\n\r\nimport * as firebase from 'firebase';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\n\r\n/*\r\nemail\r\nlocation_description\r\nlocation_geo\r\nmessage\r\nphone\r\ntime_created\r\nusername\r\n*/\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterForm extends React.Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      location_description: '',\r\n      message: '',\r\n      phone: '',\r\n      time_created: '',\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  \r\n  handleChange (evt) {\r\n    // check it out: we get the evt.target.name (which will be either \"email\" or \"password\")\r\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\r\n    this.setState({ [evt.target.name]: evt.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let day = firebase.firestore.Timestamp.fromDate(new Date());\r\n    this.state.time_created = day;\r\n\r\n    let query = 'complete?';\r\n\r\n    if(this.state.name){\r\n      query = query + 'name=' + this.state.name + '&';\r\n    }\r\n    if(this.state.phone){\r\n      query = query + 'phone=' + this.state.phone;\r\n    }\r\n\r\n    if(this.state.email){\r\n      query = query + 'email=' + this.state.email;\r\n    }\r\n    \r\n    \r\n\r\n    this.props.history.push(query);\r\n    \r\n    \r\n    //firebase.firestore().collection(\"requests\").add(this.state);\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render () {\r\n\r\n    return (\r\n\r\n      <React.Fragment>\r\n\r\n          <header>\r\n            <div className=\"container\">\r\n              <Link className=\"back-link\" to={`/request/how-it-works`}>Back to How It Works</Link>\r\n              <h2>Fill in your information</h2>\r\n              <p>We need your basic information so its easier for someone to help you.</p>\r\n            </div>\r\n          </header>\r\n\r\n          <div className=\"container\">\r\n    \r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n              <fieldset>\r\n                <label>Name</label>\r\n                <input type=\"text\" name=\"name\" onChange={this.handleChange} />\r\n              </fieldset>\r\n\r\n              <fieldset>\r\n                <label>Email</label>\r\n                <input type=\"text\" name=\"email\" onChange={this.handleChange} />\r\n              </fieldset>\r\n\r\n              <fieldset>\r\n                <label>Location Description</label>\r\n                <input type=\"text\" name=\"location_description\" onChange={this.handleChange} />\r\n              </fieldset>\r\n\r\n              <fieldset>\r\n                <label>Message</label>\r\n                <input type=\"text\" name=\"message\" onChange={this.handleChange} />\r\n              </fieldset>\r\n              \r\n              <fieldset>\r\n                <label>Phone</label>\r\n                <input name=\"phone\" onChange={this.handleChange} />\r\n              </fieldset>\r\n              \r\n              <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\n\r\n// Images\r\nimport requestIcon from '../../assets/img/requester.svg';\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterHowItWorks extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <Page />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// page uses the hook\r\nfunction Page() {\r\n  const { t, i18n } = useTranslation();\r\n  let match = useRouteMatch();\r\n\r\n  const changeLanguage = lng => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n\r\n  return (\r\n      <React.Fragment>\r\n        \r\n        <Link to={`/`}>Back</Link>\r\n        <h2>{t('how_it_works.title')}</h2>\r\n        <img src={requestIcon} alt=\"Request Icon\" />\r\n        <h3>{t('requester.how_it_works.step_1.title')}</h3>\r\n        <p>{t('requester.how_it_works.step_1.description')}</p>\r\n\r\n        <Link to={`step-1`}>Skip and submit a request</Link>\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\n\r\n// Images\r\nimport requestIcon from '../../assets/img/requester.svg';\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterComplete extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <Page />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// page uses the hook\r\nfunction Page() {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const name = urlParams.get('name');\r\n\r\n  const changeLanguage = lng => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <header>\r\n          <div className=\"container\">\r\n            <Link className=\"back-link\" to={`/`}>Back Home.</Link>\r\n            <h3>\r\n              <Trans i18nKey=\"requester.complete.request_sent\" >\r\n                Hello <strong>{{name}}</strong>.\r\n              </Trans>\r\n            </h3>\r\n            <p>{t('requester.complete.description')}</p>\r\n          </div>\r\n        </header>        \r\n      </React.Fragment>\r\n      \r\n  );\r\n}\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport { RequesterForm } from './requester-form';\r\nimport { RequesterHowItWorks } from './requester-how-it-works';\r\nimport { RequesterComplete } from './requester-complete';\r\n\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterPage extends React.Component {\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <Request />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// This will be removed, just allows easier acess to parts in development\r\nfunction RequestFullNav(){\r\n  let match = useRouteMatch();\r\n  return(\r\n  <ul>\r\n    <li>\r\n      <Link to={`${match.url}/how-it-works`}>How It Works</Link>\r\n    </li>\r\n    <li>\r\n      <Link to={`${match.url}/step-1`}>Skip</Link>\r\n    </li>\r\n    <li>\r\n      <Link to={`${match.url}/step-2`}>Step 2</Link>\r\n    </li>\r\n\r\n    <li>\r\n      <Link to={`${match.url}/complete`}>Complete</Link>\r\n    </li>\r\n  </ul>\r\n  )\r\n}\r\n\r\n\r\n  \r\n// Request Page\r\nfunction Request() {\r\n    let match = useRouteMatch();\r\n  \r\n    return (\r\n      <div className=\"container\">\r\n        \r\n        {/* <RequestFullNav /> */}\r\n\r\n        <Route path={`${match.url}/how-it-works`} component={RequesterHowItWorks} />\r\n        <Route path={`${match.url}/step-1`} component={RequesterForm} />\r\n        <Route path={`${match.url}/step-2`} component={RequesterForm} />\r\n        <Route path={`${match.url}/complete`} component={RequesterComplete} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n","\r\n\r\nimport React, { Component, useContext, useEffect, useState } from 'react'\r\nimport { FirebaseContext } from '../../context/firebase';\r\nimport 'firebase/firestore';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport {Carousel} from '../carousel';  \r\n\r\n// Volunteer Page\r\nexport class VolunteerPage extends React.Component {\r\n    render() {\r\n      return <Volunteer />;\r\n    }\r\n}\r\n\r\n// Request Page\r\nfunction Volunteer() {\r\n  const firebase = useContext(FirebaseContext);\r\n  const [list, setList] = useState(null);\r\n  const ref = firebase.firestore().collection(`requests`);\r\n\r\n  console.log(ref);\r\n  \r\n\r\n  useEffect(() => {\r\n    ref.get().then(snapshot => {\r\n      if (!snapshot) {\r\n        setList(l => [])\r\n      } else {\r\n        let requests = []\r\n        snapshot.forEach(request => {\r\n          requests.push({ key: request.id, ...request.data() })\r\n        })\r\n        setList(l => requests)\r\n      }\r\n    }).catch(error => {\r\n      // Handle the error\r\n    })\r\n  }, [])\r\n\r\n\r\n  let listToDisplay\r\n  if (list === null) {\r\n    listToDisplay = (<li>Loading requests...</li>)\r\n  } else if (list.length === 0) {\r\n    listToDisplay = (<li>No requests found</li>)\r\n  } else {\r\n    listToDisplay = list.map(request => {\r\n      return (\r\n      <ul key={request.key} >\r\n        <li>{ request.email }</li>\r\n        <li>{ request.location_description }</li>\r\n        <li>{ request.message }</li>\r\n        <li>{ request.phone }</li>\r\n        { <li>{request.time_created.seconds}</li> }\r\n      </ul>\r\n      )\r\n    })\r\n  }\r\n  return (\r\n    <div>{ listToDisplay }</div>\r\n  )\r\n}","import React, {Suspense} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport FirebaseProvider  from './context/firebase';\r\nimport { RequesterPage } from './components/requester/requester-page';\r\nimport { VolunteerPage } from './components/volunteer/volunteer-page';\r\nimport { useTranslation, Trans } from 'react-i18next';\r\n\r\n// Images\r\nimport requestIcon from './assets/img/requester.svg';\r\n\r\n\r\n\r\n\r\nclass LanguageSelect extends React.Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      isHidden: true\r\n    }\r\n  }\r\n  toggleHidden () {\r\n    this.setState({\r\n      isHidden: !this.state.isHidden\r\n    })\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <button onClick={this.toggleHidden.bind(this)} >\r\n          Select Lang\r\n        </button>\r\n        {!this.state.isHidden && <LanguageToggle />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst Child = () => (\r\n<div className='modal'>\r\n      Hello, World!\r\n  </div>\r\n)\r\n\r\n\r\n\r\n\r\n\r\n// page uses the hook\r\nfunction LanguageToggle() {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const changeLanguage = lng => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"language-selection-container\">\r\n        <button onClick={() => changeLanguage('de')}>de</button>\r\n        <button onClick={() => changeLanguage('en')}>en</button>\r\n      </div>\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n\r\n      <FirebaseProvider>\r\n        \r\n        <Router>\r\n\r\n            {/* \r\n            // If Language and Logo need to go on every page.\r\n            <header>\r\n              <Link className=\"logo\" to=\"/\">[Logo]</Link>\r\n              <LanguageSelect />\r\n            </header> \r\n            */}\r\n            \r\n            <Switch>\r\n              <Route path=\"/request\">\r\n                <RequesterPage />\r\n              </Route>\r\n            \r\n              <Route path=\"/volunteer\">\r\n                <VolunteerPage />\r\n              </Route>\r\n\r\n              <Route path=\"/\">\r\n                <header>\r\n                  <Link className=\"logo\" to=\"/\">[Logo]</Link>\r\n                  <LanguageSelect />\r\n                </header>\r\n                <Home />\r\n              </Route>\r\n\r\n            </Switch>\r\n\r\n        </Router>\r\n      </FirebaseProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const changeLanguage = lng => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <h2>{t('home.connecting_those_affected')}</h2>\r\n        <h3>{t('home.what_would_you_like_to_do')}</h3>\r\n        \r\n        <nav>\r\n          <Link className=\"bucket bucket-link\" to=\"/request/how-it-works\">\r\n            <img src={requestIcon} alt=\"Request Icon\" />\r\n            {t('home.i_need_help')}\r\n          </Link>\r\n          <Link className=\"bucket bucket-link\" to=\"/volunteer\">\r\n            <img src={requestIcon} alt=\"Request Icon\" />\r\n            {t('home.i_want_to_help')}\r\n          </Link>\r\n        </nav>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend).init({\n    backend: {\n      loadPath: '/covid19-neighborhood-help/locales/{{lng}}/{{ns}}.json',\n    }\n  });\n// detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\ni18n.use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React, {Suspense} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './i18n';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={null}>\r\n    <App />\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["context/firebase.js","components/carousel.js","components/requester/requester-form.js","components/requester/requester-how-it-works.js","components/requester/requester-page.js","components/volunteer/volunteer-page.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["FirebaseContext","createContext","children","app","apps","length","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Provider","value","Carousel","this","props","type","React","Component","RequesterForm","state","name","email","location_description","message","phone","time_created","handleChange","bind","handleSubmit","evt","setState","target","event","day","firebase","Timestamp","fromDate","Date","collection","add","preventDefault","onSubmit","onChange","RequesterHowItWorks","alert","Fragment","onClick","clicky","i18nKey","RequesterPage","Request","match","useRouteMatch","to","url","path","component","VolunteerPage","Volunteer","listToDisplay","useContext","useState","list","setList","ref","firestore","useEffect","get","then","snapshot","requests","forEach","request","console","log","data","push","key","id","l","catch","error","map","seconds","Loader","className","MyComponent","Page","useTranslation","t","i18n","changeLanguage","lng","App","fallback","Home","Boolean","window","location","hostname","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","backend","loadPath","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3779e2fe.chunk.js","sourcesContent":["import React, { createContext } from 'react'\r\nimport app from 'firebase/app'\r\n\r\nconst FirebaseContext = createContext(null)\r\nexport { FirebaseContext }\r\n\r\nexport default ({ children }) => {\r\n    if (!app.apps.length) {\r\n      app.initializeApp({\r\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n        authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n        databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n        projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n        storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n        messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n        appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n      })\r\n    }\r\n    return (\r\n      <FirebaseContext.Provider value={ app }>\r\n        { children }\r\n      </FirebaseContext.Provider>\r\n    )\r\n  }","\r\nimport React, { Component } from 'react';\r\n\r\n// Volunteer Page\r\nexport class Carousel extends React.Component {\r\n    render() {\r\n      return <div>[how it works carousel] from {this.props.type}</div>;\r\n    }\r\n  }","\r\nimport React from 'react';\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\n\r\nimport * as firebase from 'firebase';\r\n\r\n\r\n\r\n/*\r\nemail\r\n\r\nlocation_description\r\n\r\nlocation_geo\r\n\r\nmessage\r\n\r\nphone\r\n\r\ntime_created\r\n\r\nusername\r\n\r\n*/\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterForm extends React.Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      location_description: '',\r\n      message: '',\r\n      phone: '',\r\n      time_created: ''\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  \r\n  handleChange (evt) {\r\n    // check it out: we get the evt.target.name (which will be either \"email\" or \"password\")\r\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\r\n    this.setState({ [evt.target.name]: evt.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let day = firebase.firestore.Timestamp.fromDate(new Date());\r\n    this.state.time_created = day;\r\n    firebase.firestore().collection(\"requests\").add(this.state);\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render () {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n\r\n        <fieldset>\r\n          <label>Name</label>\r\n          <input type=\"text\" name=\"name\" onChange={this.handleChange} />\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <label>Email</label>\r\n          <input type=\"text\" name=\"email\" onChange={this.handleChange} />\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <label>Location Description</label>\r\n          <input type=\"text\" name=\"location_description\" onChange={this.handleChange} />\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <label>Message</label>\r\n          <input type=\"text\" name=\"message\" onChange={this.handleChange} />\r\n        </fieldset>\r\n        \r\n        <fieldset>\r\n          <label>Phone</label>\r\n          <input name=\"phone\" onChange={this.handleChange} />\r\n        </fieldset>\r\n        \r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\n\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\n\r\n\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterHowItWorks extends React.Component {\r\n  \r\n  \r\n  clicky(){\r\n    alert('test');\r\n    //i18n.changeLanguage('de');\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <h2 onClick={this.clicky}>This is how it works</h2>\r\n        <Trans i18nKey=\"title\">\r\n          title\r\n        </Trans>\r\n        <Carousel type=\"requester\" />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\n\r\nimport * as firebase from 'firebase';\r\n\r\nimport { RequesterForm } from './requester-form';\r\nimport { RequesterHowItWorks } from './requester-how-it-works';\r\n\r\n\r\n/*\r\nemail\r\n\r\nlocation_description\r\n\r\nlocation_geo\r\n\r\nmessage\r\n\r\nphone\r\n\r\ntime_created\r\n\r\nusername\r\n\r\n\r\n*/\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterPage extends React.Component {\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <Request />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n  \r\n// Request Page\r\nfunction Request() {\r\n    let match = useRouteMatch();\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Requester</h2>\r\n  \r\n        <ul>\r\n          <li>\r\n            <Link to={`${match.url}/step-1`}>Step 1</Link>\r\n          </li>\r\n          <li>\r\n            <Link to={`${match.url}/step-2`}>\r\n              Step 2\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n        <Route path={`${match.url}/step-1`} component={RequesterHowItWorks} />\r\n        <Route path={`${match.url}/step-2`} component={RequesterForm} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n","\r\n\r\nimport React, { Component, useContext, useEffect, useState } from 'react'\r\nimport { FirebaseContext } from '../../context/firebase';\r\nimport 'firebase/firestore';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport {Carousel} from '../carousel';  \r\n\r\n// Volunteer Page\r\nexport class VolunteerPage extends React.Component {\r\n    render() {\r\n      return <Volunteer />;\r\n    }\r\n}\r\n\r\n// Request Page\r\nfunction Volunteer() {\r\n  const firebase = useContext(FirebaseContext);\r\n  const [list, setList] = useState(null);\r\n  const ref = firebase.firestore().collection(`requests`);\r\n\r\n  useEffect(() => {\r\n    ref.get().then(snapshot => {\r\n      if (!snapshot) {\r\n        setList(l => [])\r\n      } else {\r\n        let requests = []\r\n        snapshot.forEach(request => {\r\n          console.log(request);\r\n          console.log(request.data());\r\n          requests.push({ key: request.id, ...request.data() })\r\n        })\r\n        setList(l => requests)\r\n      }\r\n    }).catch(error => {\r\n      // Handle the error\r\n    })\r\n  }, [])\r\n\r\n\r\n  let listToDisplay\r\n  if (list === null) {\r\n    listToDisplay = (<li>Loading requests...</li>)\r\n  } else if (list.length === 0) {\r\n    listToDisplay = (<li>No requests found</li>)\r\n  } else {\r\n    listToDisplay = list.map(request => {\r\n      return (\r\n      <ul key={request.key} >\r\n        <li>{ request.email }</li>\r\n        <li>{ request.location_description }</li>\r\n        <li>{ request.message }</li>\r\n        <li>{ request.phone }</li>\r\n        { <li>{request.time_created.seconds}</li> }\r\n      </ul>\r\n      )\r\n    })\r\n  }\r\n  return (\r\n    <div>{ listToDisplay }</div>\r\n  )\r\n}","import React, {Suspense} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport FirebaseProvider  from './context/firebase';\r\nimport { RequesterPage } from './components/requester/requester-page';\r\nimport { VolunteerPage } from './components/volunteer/volunteer-page';\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\n\r\n\r\n\r\n\r\n// loading component for suspense fallback\r\nconst Loader = () => (\r\n  <div className=\"App\">\r\n    <div>loading...</div>\r\n  </div>\r\n);\r\n\r\n\r\n// Component using the Trans component\r\nfunction MyComponent() {\r\n  return (\r\n    <Trans i18nKey=\"description.part1\">\r\n      To get started, edit <code>src/App.js</code> and save to reload.\r\n    </Trans>\r\n  );\r\n}\r\n\r\n// page uses the hook\r\nfunction Page() {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const changeLanguage = lng => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <button onClick={() => changeLanguage('de')}>de</button>\r\n        <button onClick={() => changeLanguage('en')}>en</button>\r\n      </div>\r\n      <div className=\"App-intro\">\r\n        <MyComponent />\r\n      </div>\r\n      <div>{t('description.part2')}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n\r\n    <Suspense fallback={<Loader />}>\r\n      <FirebaseProvider>\r\n        <h1>Hello</h1>\r\n        <Page />\r\n        <Router>\r\n          <div>\r\n            <Switch>\r\n              <Route path=\"/request\">\r\n                <RequesterPage />\r\n              </Route>\r\n            \r\n              <Route path=\"/volunteer\">\r\n                <VolunteerPage />\r\n              </Route>\r\n\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </FirebaseProvider>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n  return (\r\n    <nav>\r\n      <Link className=\"main-choice\" to=\"/request\">Request</Link>\r\n      <Link className=\"main-choice\" to=\"/volunteer\">Volunteer</Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    backend: {loadPath: './public/locales/{{lng}}/{{ns}}.json'},\r\n    \r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './i18n';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["context/firebase.js","components/carousel.js","components/requester/requester-page.js","components/volunteer/volunteer-page.js","App.js","serviceWorker.js","index.js"],"names":["FirebaseContext","createContext","children","app","apps","length","initializeApp","apiKey","process","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","Provider","value","React","Component","RequesterPage","state","name","email","location_description","message","phone","time_created","handleChange","bind","handleSubmit","evt","this","setState","target","event","day","firebase","Timestamp","fromDate","Date","collection","add","preventDefault","onSubmit","type","onChange","VolunteerPage","Volunteer","listToDisplay","useContext","useState","list","setList","ref","firestore","useEffect","get","then","snapshot","requests","forEach","request","console","log","data","push","key","id","l","catch","error","map","seconds","App","path","Home","className","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54793e1d.chunk.js","sourcesContent":["import React, { createContext } from 'react'\r\nimport app from 'firebase/app'\r\n\r\nconst FirebaseContext = createContext(null)\r\nexport { FirebaseContext }\r\n\r\nexport default ({ children }) => {\r\n    if (!app.apps.length) {\r\n      app.initializeApp({\r\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n        authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n        databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n        projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n        storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n        messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n        appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n      })\r\n    }\r\n    return (\r\n      <FirebaseContext.Provider value={ app }>\r\n        { children }\r\n      </FirebaseContext.Provider>\r\n    )\r\n  }","\r\nimport React, { Component } from 'react';\r\n\r\n// Volunteer Page\r\nexport class Carousel extends React.Component {\r\n    render() {\r\n      return <div>[how it works carousel] from {this.props.type}</div>;\r\n    }\r\n  }","\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\n\r\n\r\nimport {Carousel} from '../carousel';\r\n\r\nimport * as firebase from 'firebase';\r\n\r\n\r\n\r\n/*\r\nemail\r\n\r\nlocation_description\r\n\r\nlocation_geo\r\n\r\nmessage\r\n\r\nphone\r\n\r\ntime_created\r\n\r\nusername\r\n\r\n\r\n*/\r\n\r\n\r\n// Volunteer Page\r\nexport class RequesterPage extends React.Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      location_description: '',\r\n      message: '',\r\n      phone: '',\r\n      time_created: ''\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  \r\n  handleChange (evt) {\r\n    // check it out: we get the evt.target.name (which will be either \"email\" or \"password\")\r\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\r\n    this.setState({ [evt.target.name]: evt.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let day = firebase.firestore.Timestamp.fromDate(new Date());\r\n    this.state.time_created = day;\r\n    firebase.firestore().collection(\"requests\").add(this.state);\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render () {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n\r\n        <fieldset>\r\n          <label>Name</label>\r\n          <input type=\"text\" name=\"name\" onChange={this.handleChange} />\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <label>Email</label>\r\n          <input type=\"text\" name=\"email\" onChange={this.handleChange} />\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <label>Location Description</label>\r\n          <input type=\"text\" name=\"location_description\" onChange={this.handleChange} />\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <label>Message</label>\r\n          <input type=\"text\" name=\"message\" onChange={this.handleChange} />\r\n        </fieldset>\r\n        \r\n        <fieldset>\r\n          <label>Phone</label>\r\n          <input name=\"phone\" onChange={this.handleChange} />\r\n        </fieldset>\r\n        \r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n  \r\n// Request Page\r\nfunction Request() {\r\n    let match = useRouteMatch();\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Request</h2>\r\n        <Carousel type=\"requester\" />\r\n  \r\n        <ul>\r\n          <li>\r\n            <Link to={`${match.url}/step-1`}>Step 1</Link>\r\n          </li>\r\n          <li>\r\n            <Link to={`${match.url}/step-2`}>\r\n              Step 2\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n","\r\n\r\nimport React, { Component, useContext, useEffect, useState } from 'react'\r\nimport { FirebaseContext } from '../../context/firebase';\r\nimport 'firebase/firestore';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport {Carousel} from '../carousel';  \r\n\r\n// Volunteer Page\r\nexport class VolunteerPage extends React.Component {\r\n    render() {\r\n      return <Volunteer />;\r\n    }\r\n}\r\n\r\n// Request Page\r\nfunction Volunteer() {\r\n  const firebase = useContext(FirebaseContext);\r\n  const [list, setList] = useState(null);\r\n  const ref = firebase.firestore().collection(`requests`);\r\n\r\n  useEffect(() => {\r\n    ref.get().then(snapshot => {\r\n      if (!snapshot) {\r\n        setList(l => [])\r\n      } else {\r\n        let requests = []\r\n        snapshot.forEach(request => {\r\n          console.log(request);\r\n          console.log(request.data());\r\n          requests.push({ key: request.id, ...request.data() })\r\n        })\r\n        setList(l => requests)\r\n      }\r\n    }).catch(error => {\r\n      // Handle the error\r\n    })\r\n  }, [])\r\n\r\n\r\n  let listToDisplay\r\n  if (list === null) {\r\n    listToDisplay = (<li>Loading requests...</li>)\r\n  } else if (list.length === 0) {\r\n    listToDisplay = (<li>No requests found</li>)\r\n  } else {\r\n    listToDisplay = list.map(request => {\r\n      return (\r\n      <ul key={request.key} >\r\n        <li>{ request.email }</li>\r\n        <li>{ request.location_description }</li>\r\n        <li>{ request.message }</li>\r\n        <li>{ request.phone }</li>\r\n        { <li>{request.time_created.seconds}</li> }\r\n      </ul>\r\n      )\r\n    })\r\n  }\r\n  return (\r\n    <div>{ listToDisplay }</div>\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport FirebaseProvider from './context/firebase';\r\nimport {RequesterPage} from './components/requester/requester-page';\r\nimport {VolunteerPage} from './components/volunteer/volunteer-page';\r\n\r\n\r\n\r\nexport default function App() {\r\n\r\n\r\n  return (\r\n    <FirebaseProvider>\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/request\">\r\n            <RequesterPage />\r\n          </Route>\r\n         \r\n          <Route path=\"/volunteer\">\r\n            <VolunteerPage />\r\n          </Route>\r\n\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    </FirebaseProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n  return (\r\n    <nav>\r\n      <Link className=\"main-choice\" to=\"/request\">Request</Link>\r\n      <Link className=\"main-choice\" to=\"/volunteer\">Volunteer</Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}